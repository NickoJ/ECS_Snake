//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity gameFieldMapEntity { get { return GetGroup(GameMatcher.GameFieldMap).GetSingleEntity(); } }
    public GameFieldMapComponent gameFieldMap { get { return gameFieldMapEntity.gameFieldMap; } }
    public bool hasGameFieldMap { get { return gameFieldMapEntity != null; } }

    public GameEntity SetGameFieldMap(bool[,] newMap) {
        if (hasGameFieldMap) {
            throw new Entitas.EntitasException("Could not set GameFieldMap!\n" + this + " already has an entity with GameFieldMapComponent!",
                "You should check if the context already has a gameFieldMapEntity before setting it or use context.ReplaceGameFieldMap().");
        }
        var entity = CreateEntity();
        entity.AddGameFieldMap(newMap);
        return entity;
    }

    public void ReplaceGameFieldMap(bool[,] newMap) {
        var entity = gameFieldMapEntity;
        if (entity == null) {
            entity = SetGameFieldMap(newMap);
        } else {
            entity.ReplaceGameFieldMap(newMap);
        }
    }

    public void RemoveGameFieldMap() {
        gameFieldMapEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public GameFieldMapComponent gameFieldMap { get { return (GameFieldMapComponent)GetComponent(GameComponentsLookup.GameFieldMap); } }
    public bool hasGameFieldMap { get { return HasComponent(GameComponentsLookup.GameFieldMap); } }

    public void AddGameFieldMap(bool[,] newMap) {
        var index = GameComponentsLookup.GameFieldMap;
        var component = CreateComponent<GameFieldMapComponent>(index);
        component.map = newMap;
        AddComponent(index, component);
    }

    public void ReplaceGameFieldMap(bool[,] newMap) {
        var index = GameComponentsLookup.GameFieldMap;
        var component = CreateComponent<GameFieldMapComponent>(index);
        component.map = newMap;
        ReplaceComponent(index, component);
    }

    public void RemoveGameFieldMap() {
        RemoveComponent(GameComponentsLookup.GameFieldMap);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherGameFieldMap;

    public static Entitas.IMatcher<GameEntity> GameFieldMap {
        get {
            if (_matcherGameFieldMap == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.GameFieldMap);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherGameFieldMap = matcher;
            }

            return _matcherGameFieldMap;
        }
    }
}
